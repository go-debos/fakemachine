name: Build and Test

on:
  push:
    branches-ignore:
      - '*.tmp'
  # Build at 04:00am every Monday
  schedule:
    - cron: "0 4 * * 1"
  pull_request:
  workflow_dispatch:

jobs:
  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-go@v5
    - uses: actions/checkout@v4
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.3.0

  man-page:
    name: Check if man page has been regenerated
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name:
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc

        # Don't check the diff of the final manpage, instead check the
        # intermediate markdownfile  instead as it is a lot less likely to
        # drastically change with different versions of pandoc etc.
        cd doc/man/ && ./create_manpage.sh
        git checkout *.1
        git diff --exit-code

  test:
    strategy:
      fail-fast: false
      matrix:
        # Currently nested virtualisation (hence kvm) is not supported on GitHub
        # actions; but the qemu backend is enough to test Fakemachine
        # functionality without hardware acceleration since the majority of code
        # is shared between the qemu and kvm backends.
        # See https://github.com/actions/runner-images/issues/183
        #
        # For Arch Linux uml is not yet supported, so only test under qemu there.
        os: [bookworm, trixie]
        backend: [qemu, uml, kvm]
        include:
          - os: arch
            backend: "qemu"
          - os: arch
            backend: "kvm"
    name: Test ${{matrix.os}} with ${{matrix.backend}} backend
    runs-on: 'ubuntu-latest'
    defaults:
      run:
        shell: bash
    container:
      image: ghcr.io/go-debos/test-containers/${{matrix.os}}:main
      options: >-
        --security-opt label=disable
        --cap-add=SYS_PTRACE
        --tmpfs /scratch:exec
        ${{ matrix.backend == 'kvm' && '--device /dev/kvm' || '' }}
    env:
      TMP: /scratch
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        filter: tree:0

    - name: Set safe directory in container
      run: /usr/bin/git config --global --add safe.directory ${GITHUB_WORKSPACE}

    - name: Define fakemachine version
      run: echo "FAKEMACHINE_VER=$(git describe --always --tags HEAD)" >> "$GITHUB_ENV"

    - name: Test build
      run: go build -ldflags="-X main.Version=${FAKEMACHINE_VER}" ./cmd/fakemachine

    - name: Print fakemachine version
      run: ./fakemachine --version

    - name: Run unit tests (${{matrix.backend}} backend)
      run: go test -v ./... --backend=${{matrix.backend}} | tee test.out

  # Job to key success status against
  allgreen:
    name: allgreen
    if: always()
    needs:
      - golangci
      - man-page
      - test
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
